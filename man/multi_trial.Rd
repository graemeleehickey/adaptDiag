% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multi_trial.R
\name{multi_trial}
\alias{multi_trial}
\title{Simulate and analyse multiple trials}
\usage{
multi_trial(
  sens_true,
  spec_true,
  prev_true,
  endpoint = "both",
  sens_pg = 0.8,
  spec_pg = 0.8,
  prior_sens = c(0.1, 0.1),
  prior_spec = c(0.1, 0.1),
  prior_prev = c(0.1, 0.1),
  succ_sens = 0.95,
  succ_spec = 0.95,
  fut = 0.05,
  n_at_looks,
  min_pos = 1,
  n_mc = 10000,
  n_trials = 1000,
  ncores
)
}
\arguments{
\item{sens_true}{scalar. True assumed sensitivity (must be between 0 and 1).}

\item{spec_true}{scalar. True assumed specificity (must be between 0 and 1).}

\item{prev_true}{scalar. True assumed prevalence as measured by the
gold-standard reference test (must be between 0 and 1).}

\item{endpoint}{character. The endpoint(s) that must meet a performance goal
criterion. The default is `code = "both"`, which means that the endpoint is
based simultaneously on sensitivity and specificity. Alternative options
are to specify `code = "sens"` or `code = "spec"` for sensitivity and
specificity, respectively. If only a single endpoint is selected (e.g.
sensitivity), then the PG and success probability threshold of the other
statistic are set to 1, and ignored for later analysis.}

\item{sens_pg}{scalar. Performance goal (PG) for the sensitivity endpoint,
such that the the posterior probability that the PG is exceeded is
calculated. Must be between 0 and 1.}

\item{spec_pg}{scalar. Performance goal (PG) for the specificity endpoint,
such that the the posterior probability that the PG is exceeded is
calculated. Must be between 0 and 1.}

\item{prior_sens}{vector. A vector of length 2 with the prior shape
parameters for the sensitivity Beta distribution.}

\item{prior_spec}{vector. A vector of length 2 with the prior shape
parameters for the specificity Beta distribution.}

\item{prior_prev}{vector. A vector of length 2 with the prior shape
parameters for the prevalence Beta distribution.}

\item{succ_sens}{scalar. Probability threshold for the sensitivity to exceed
in order to declare a success. Must be between 0 and 1.}

\item{succ_spec}{scalar. Probability threshold for the specificity to exceed
in order to declare a success. Must be between 0 and 1.}

\item{fut}{TBA}

\item{n_at_looks}{vector. Sample sizes for each interim look. The final value
(or only value if no interim looks are planned) is the maximum allowable
sample size for the trial.}

\item{n_mc}{integer. Number of Monte Carlo draws to use for sampling from the
Beta-Binomial distribution.}

\item{n_trials}{integer. The number of clinical trials to simulate overall,
which will be used to evaluate the operating characteristics.}

\item{ncores}{integer. The number of cores to use for parallel processing. If
`ncores` is missing, it defaults to the maximum number of cores available
(spare 1).}
}
\value{
A vector with:
- The trial stage (`stage`)
- The posterior probability of exceeding the performance goal for
  sensitivity (`pp_sens`)
- The posterior probability of exceeding the performance goal for
  specificity (`pp_spec`)
- The true positive count (`tp`)
- The true negative count (`tn`)
- The false positive count (`fp`)
- The false negative count (`fn`)
}
\description{
Multiple trials and simulated and analysed up to the final
  analysis stage, irrespective of whether it would have been stopped for
  early success or expected futility. The output of the trials is handled
  elsewhere.
}
\details{

}
\section{Simulation routine}{


TBA
}

\section{Parallelization}{

To use will multiple cores (where available), the argument \code{ncores}
  can be increased from the default of 1. Note: on Windows machines, it is
  not possible to use the \code{\link[parallel]{mclapply}} function with
  \code{ncores} \eqn{>1}.
}

\examples{

multi_trial(
  sens_true = 0.9,
  spec_true = 0.95,
  prev_true = 0.1,
  endpoint = "both",
  sens_pg = 0.8,
  spec_pg = 0.8,
  prior_sens = c(1, 1),
  prior_spec = c(1, 1),
  prior_prev = c(1, 1),
  succ_sens = 0.95,
  succ_spec = 0.95,
  fut = 0.05,
  n_at_looks = c(200, 400, 600, 800, 1000),
  min_pos = 1,
  n_mc = 10000,
  n_trials = 2,
  ncores = 1
)

}
